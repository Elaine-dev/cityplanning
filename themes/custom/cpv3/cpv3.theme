<?php
use Drupal\node\Entity\Node;
use Drupal\image\Entity\ImageStyle;
use Drupal\taxonomy\Entity\Term;
use \Drupal\views\ViewExecutable;

function cpv3_theme_rebuild()
{
    drupal_static_reset('theme_get_registry');
    cache_clear_all('theme_registry', 'cache', true);
}
/**
 * Implement hool_preprocess_html().
 * @param $variables
 */
function cpv3_preprocess_html(&$variables)
{
    global $base_url;
    $variables['base_url'] = $base_url;
}

/**
 * Implement hook_preprocess().
 * @param array $variables
 */
function cpv3_preprocess_page(&$variables)
{
    global $base_url;
    $variables['base_url'] = $base_url;

    $variables['footer_message'] = theme_get_setting('footer_message', 'ladcp');
    $variables['images_path'] = \Drupal::theme()->getActiveTheme()->getPath() . '/image/';
    $variables['base_path'] = base_path();
    $variables['theme_base_path'] = $base_url .'/'. \Drupal::theme()->getActiveTheme()->getPath();
    $variables['route_name'] = \Drupal::routeMatch()->getRouteName();

    // Publication/Newsletter
    $publicationTerms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('publication_type');
    $variables['publication_categories'] = formatTabTitle($publicationTerms);

    // Community Plan Update/Hollywood Tab Menu
    $hollywoodCpuTerms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('hollywood_community_plan');
    $variables['hollywood_menu'] = formatTabMenuTitle($hollywoodCpuTerms);

   // Community Plan Update/Southwest Valley Tab Menu
   $swvalleyCpuTerms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('southwest_valley_community_plan_');
   $variables['swvalley_menu'] = formatTabMenuTitle($swvalleyCpuTerms);

   // Community Plan Update/OurLA General Plan Update Tab Menu
   $veniceCpuTerms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('venice_local_coastal_program');
   $variables['venice_menu'] = formatTabMenuTitle($veniceCpuTerms);

   // Community Plan Update/Venice Local Coastal Program Tab Menu
   $generalCpuTerms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('gerneral_plan_update');
   $variables['general_menu'] = formatTabMenuTitle($generalCpuTerms);

   // TNP Plan/Orange Line Tab Menu
   $orangeTnpCpuTerms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('orange_line_tnp_menu');
   $variables['orange_line_menu'] = formatTabMenuTitle($orangeTnpCpuTerms);

   // TNP Plan/ Slauson Corridor Tab Menu
   $slausonTNPCpuTerms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('slauson_corridor_tnp_menu');
   $variables['slauson_corridor_menu'] = formatTabMenuTitle($slausonTNPCpuTerms);

   // Community Plan Update/Downtown Plan Update Tab Menu
   $downtownCpuTerms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('downtown_community_plan_update');
   $variables['downtown_menu'] = formatTabMenuTitle($downtownCpuTerms);

   // Community Plan Update/Westside Plan Update Tab Menu
   $westsideCpuTerms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('westside_community_plan_update');
   $variables['westside_menu'] = formatTabMenuTitle($westsideCpuTerms);

   // Community Plan Update/Boyle Heights Plan Update Tab Menu
   $boyleheightsCpuTerms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('boyle_heights_cpu');
   $variables['boyleheights_menu'] = formatTabMenuTitle($boyleheightsCpuTerms);

   // Community Plan Update/Harbor Plan Update Tab Menu
   $harborCpuTerms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('harbor_menu');
   $variables['harborplans_menu'] = formatTabMenuTitle($harborCpuTerms);

   // Community Plan Update/Southeast Valley Plans Update Tab Menu
   $sevplansCpuTerms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('southeast_valley_menu');
   $variables['sevplans_menu'] = formatTabMenuTitle($sevplansCpuTerms);

  // SPANISH MENUS CPU //
  // Community Plan Update/Southeast Valley Plans Update Tab Menu
  $bhspanCpuTerms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('boyle_heights_cpu_menu_es');
  $variables['bhspan_menu'] = formatTabMenuTitle($bhspanCpuTerms);


    // get current uri
    $current_uri = \Drupal::request()->getRequestUri();
    $current_uri_split = explode('/', $current_uri);       //Array ( [0] => [1] => about [2] => department-city-planning )
    $current = $current_uri_split[1];
    $variables['currentlink'] = $current;

    // overlay
    $nodes_storage = \Drupal::entityTypeManager()->getStorage('node');
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('overlays');
    foreach ($terms as $term) {
        $tid = $term->tid;
        $tname = $term->name;

        // load nodes according to the field type
        $query = \Drupal::entityQuery('node')
                 ->condition('type', 'overlays')
                 ->condition('field_type', $tid)
                 ->condition('status', 1)
                 ->sort('title', 'asc');
        $nids = $query->execute();

        // check if $nid is empty
        if (!empty($nids)) {
            $nodes = $nodes_storage->loadMultiple($nids);

            foreach ($nodes as $n) {
                $variables['overlays'][$tname][] = [
                    'nid' => $n->id(),
                    'title' => $n->title->value,
                    'url' => $n->url(),
                ];
            }
        }
    }

    // Map Gallery
    mapGallery($variables);
}

/**
* Implements hook_views_pre_render().
*/

function cpv3_views_pre_render(ViewExecutable $view) {
  if (isset($view) && ($view->storage->id() == 'community_plan_update_news_feed')) {
    $view->element['#attached']['library'][] = 'pager-view';
  }
}

/**
 * Implement template_preprocess_views_view().
 * @param array $variables
 */
function cpv3_preprocess_views_view(&$variables)
{
    global $base_url;
    $variables['theme_base_path'] = $base_url .'/'. \Drupal::theme()->getActiveTheme()->getPath();  // active theme path

    // Commissions
    $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('commissions');
    @$variables['category'] = formatTabCommissionTitle($terms);

    $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('area_planning_type');
    foreach ($terms as $term) {
        $description = ($term->description__value) ? $term->description__value : '';
        $term_data_1[] = array(
            "id" => $term->tid,
            "name" => $term->name,
            "description" => $description,
        );
    }

    @$variables['planning_area_category'] = $term_data_1;
}

/**
 * @param array $suggestions
 * @param array $variables
 * Suggest template as per page--node--[content-type]--[node-title]
 * eg : page--node--page--publications.html.twig
 */
function cpv3_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
        $title = cleanString($node->getTitle());
        $content_type = $node->bundle();
        $suggestions [] = 'page__node__' . $node->getType();
        $suggestions [] = 'page__node__' . $node->getType() .'__'. $title;
        $suggestions [] = 'page__node__' . $title;
        $suggestions[] = 'page__node__' . 'orange__' . $node->bundle();
	      $suggestions[] = 'page__node__' . 'purple__' . $node->bundle();
	      $suggestions[] = 'page__node__' . 'slauson__' . $node->bundle();
    }
}

function cpv3_theme_suggestions_container_alter(&$suggestions, $vars, $hook)
{
    $suggestions [] = 'container' . '__' . 'custom';
}

function cpv3_theme_suggestions_node_alter(array &$suggestions, array $variables)
{
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
        $content_type = $node->bundle();
        $suggestions [] = 'nodes/node__' . $content_type;
    }
}

function cpv3_preprocess_node(&$variables)
{
    global $base_url;
    $variables['theme_base_path'] = $base_url .'/'. \Drupal::theme()->getActiveTheme()->getPath();
    $node = $variables['node'];
    $data = [];

    // EIR Detail
    if ($node->bundle() == 'eir_detail') {
        $eir_id = $node->get('field_select_eir')->getString();
        // Load parent nid and get respective field value.
        $eir_node = Node::load($eir_id);
        // Get field values.
        $data['case_number'] = $eir_node->get('field_case_number')->getString();
        $data['house_number'] = $eir_node->get('field_state_clearinghouse_number')->getString();
        $data['community_plan_areas'] = $eir_node->get('field_community_plan_areas')->getString();
        $data['council_district'] = $eir_node->get('field_council_district')->getString();
        $data['project_location'] = $eir_node->get('field_project_location')->getString();

        $variables['node_data'] = $data;
    }

    // SCEA Detail
    if ($node->bundle() == 'scea_detail') {
        $scea_id = $node->get('field_select_scea_title')->getString();
        $scea_node = Node::load($scea_id);

        $data['case_number'] = $scea_node->get('field_case_number')->getString();
        $data['related_case_numbers'] = $scea_node->get('field_related_case_numbers')->getString();
        $data['community_plan_areas'] = $scea_node->get('field_community_plan_areas')->getString();
        $data['council_district'] = $scea_node->get('field_council_district')->getString();
        $data['project_location'] = $scea_node->get('field_project_location')->getString();

        $variables['scea_data'] = $data;
    }
}

/**
 * remove special characters & white spaces
 * each word is seperated with dash (-)
 * @param $string
 * @return string
 *
 */
function cleanString($string)
{
    $string = str_replace(' ', '-', $string);                   // Replaces all spaces with hyphens.
    $string = preg_replace('/[^A-Za-z0-9\-]/', '', $string);    // Removes special chars.
    $string = str_replace('-', '_', $string);                   // Replaces all dash (-) with underscore(_).
    $string = strtolower($string);                              // Convert to lowercase

    return $string;
}

/**
 * create readable strings sperated with dash(-)
 * each word is seperated with dash (-)
 * @param $string
 * @return string
 *
 */
function readableURLString($string)
{
    $string = str_replace(' ', '-', $string);                   // Replaces all spaces with hyphens.
    $string = preg_replace('/[&]/', '', $string);               // Removes special chars.
    $string = trim(preg_replace('/-+/', '-', $string), '-');    //combine two or more dash with single dash
    $string = strtolower($string);                              // Convert to lowercase

    return $string;
}

/**
 * Format Title for tab
 * @var $terms object
 * @return array
 */
function formatTabTitle($terms)
{
    $i = 1;
    $term_data = array();
    foreach ($terms as $term) :
        $name = explode(' ', $term->name, 2);
        if (count($name) >= 2) {
            $firstPart = $name[0];
            @$lastPart = @$name[1] . ' ' . @$name[2];
        } else {
            $firstPart = $term->name;
        }

        $term_data [] = [
            'id' => $term->tid,
            'first_name' => $firstPart,
            'last_name' => ($lastPart) ? $lastPart : '',
            'counter' => $i
        ];

        $i++;
    endforeach;

    return $term_data;
}

/**
 * Format Title for tab
 * @var $terms object
 * @return array
 */
function formatTabMenuTitle($terms)
{
    $i = 1;
    $term_data = array();
    foreach ($terms as $term) :
      $name = explode(' ', $term->name, 2);
        $firstPart = $name[0] = "";
        if (count($name) >= 1) {
            $firstPart = $term->name;
        }
        $term_data [] = [
            'id' => $term->tid,
            'name' => $firstPart,
            'counter' => $i
        ];

        $i++;
    endforeach;

    return $term_data;
}


/**
 * Format Title for Commission tab
 * @var $terms object
 * @return array
 */
function formatTabCommissionTitle($terms)
{
    $i = 1;
    $term_data = array();
    foreach ($terms as $term) :
        $description = ($term->description__value) ? $term->description__value : '';
        $name = explode(' ', $term->name, 3);
        if (count($name) >= 3) {
            $firstPart = $name[0] . ' ' . $name[1];
            $lastPart = ($name[2]) ? $name[2] : '';
        } else {
            $firstPart = $term->name;
        }

        $term_data [] = [
            'id' => $term->tid,
            'first_name' => $firstPart,
            'last_name' => $lastPart,
            'description' => $description,
            'counter' => $i
        ];

        $i++;
    endforeach;

    return $term_data;
}

function mapGallery(&$variables) {
    $vid = 'location';
    $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, 0, 1);

    if (!empty($terms)) {
        foreach ($terms as $term) {
            $image = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term->tid)->get('field_image')->entity->uri->value;
            $imagePath = ($image) ? file_create_url($image) : '';   // Image path
            $children = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, $term->tid, 2);

            $interactive_link = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($term->tid)->get('field_interactive_link')->value;

            if (empty($children)) {
                // no child
                if ($term->parents[0] == 0)
                    $tax_tree[$term->tid] = [
                        'tid' => $term->tid,
                        'name' => $term->name,
                        'image' => $imagePath,
                        'interactive_map_link' => $interactive_link,
                    ];
            } else {
                $tax_tree[$term->tid] = [
                    'tid' => $term->tid,
                    'name' => $term->name,
                    'image' => $imagePath,
                    'interactive_map_link' => $interactive_link,
                ];

                foreach ($children as $child) {
                    $grand_children = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, $child->tid, 3);
                    if (!empty($grand_children)) {
                        $tax_tree[$term->tid]['sub'][$child->tid] = [
                            'tid' => $child->tid,
                            'name' => $child->name,
                        ];
                        foreach ($grand_children as $grand_child) {
                            $tax_tree[$term->tid]['sub'][$child->tid]['sub'][] = [
                                'tid' => $grand_child->tid,
                                'name' => $grand_child->name,
                            ];
                        }
                    } else {
                        if ($child->depth == 0) {
                            $tax_tree[$term->tid]['sub'][] = [
                                'tid' => $child->tid,
                                'name' => $child->name,
                            ];
                        }
                    }
                }
            }
        }
    }

    $variables['taxonomy_tree'] = $tax_tree;
}


/**
 * Format Title for Community Plan tab
 * @var $terms object
 * @return array
 */
function formatTabMenuTitleForCP($terms)
{
    $i = 1;
    $term_data = array();
    foreach ($terms as $term) :
    $term_data [] = [
        'id' => $term->tid,
        'name' => $term->name,
        'counter' => $i,
        'link' => readableURLString($term->name)
    ];

    $i++;
    endforeach;

    return $term_data;
}
