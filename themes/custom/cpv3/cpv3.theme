<?php
use Drupal\node\Entity\Node;
use Drupal\image\Entity\ImageStyle;
use Drupal\taxonomy\Entity\Term;

function cpv3_theme_rebuild () {
    drupal_static_reset('theme_get_registry');
    cache_clear_all('theme_registry', 'cache', TRUE);
}

/**
 * Implement hool_preprocess_html().
 * @param $variables
 */
function cpv3_preprocess_html ( &$variables ) {
    global $base_url;
    $variables['base_url'] = $base_url;
}

/**
 * Implement hook_preprocess().
 * @param array $variables
 */
function cpv3_preprocess_page ( &$variables ) {
    global $base_url;

	$variables['footer_message'] = theme_get_setting ( 'footer_message', 'ladcp' );
	$variables['images_path'] = \Drupal::theme ()->getActiveTheme ()->getPath () . '/image/';
	$variables['base_path'] = base_path ();
	$variables['theme_base_path'] = $base_url .'/'. \Drupal::theme ()->getActiveTheme ()->getPath ();
  	$variables['route_name'] = \Drupal::routeMatch()->getRouteName();

  	// Publication/Newsletter
  	$publicationTerms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('publication_type');
  	$variables['publication_categories'] = formatTabTitle($publicationTerms);

  	// get current uri
  	$current_uri = \Drupal::request()->getRequestUri();
  	$current_uri_split = explode('/', $current_uri);       //Array ( [0] => [1] => about [2] => department-city-planning )
  	$current = $current_uri_split[1];
  	$variables['currentlink'] = $current;

    // overlay
  	$nodes_storage = \Drupal::entityTypeManager()->getStorage('node');
  	$terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('overlays');
  	foreach ($terms as $term) {
  	    $tid = $term->tid;
  	    $tname = $term->name;

  	    // load nodes according to the field type
  	    $query = \Drupal::entityQuery('node')
  	             ->condition('type', 'overlays')
  	             ->condition('field_type', $tid)
                 ->condition('status', 1)
                 ->sort('title', 'asc');
        $nids = $query->execute();

        // check if $nid is empty
        if (!empty($nids)) {
            $nodes = $nodes_storage->loadMultiple($nids);

            foreach ($nodes as $n) {
                $variables['overlays'][$tname][] = [
                    'nid' => $n->id(),
                    'title' => $n->title->value,
                    'url' => $n->url(),
                ];
            }
        }
  	}
}

/**
 * Implement template_preprocess_views_view().
 * @param array $variables
 */
function cpv3_preprocess_views_view( &$variables ) {
    $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('commissions');
    @$variables['category'] = formatTabTitle($terms);

    $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('area_planning_type');
    foreach ($terms as $term) {
        $term_data_1[] = array(
            "id" => $term->tid,
            "name" => $term->name,
        );
    }

    @$variables['planning_area_category'] = $term_data_1;
}

// template suggestion for container part
/* function cpv3_theme_suggestions_page_alter ( array &$suggestions, array $variables ) {
    // Add content type suggestions.
    if (($node = \Drupal::request()->attributes->get('node')) && (strpos($_SERVER['REQUEST_URI'], "revisions") == false)) {
        array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
    }
}

function cpv3_theme_suggestions_container_alter ( $suggestions, $vars, $hook ) {
    $suggestions[] = 'container' . '__' . 'custom';
} */

/**
 * @param array $suggestions
 * @param array $variables
 * Suggest template as per page--node--[content-type]--[node-title]
 * eg : page--node--page--publications.html.twig
 */
function cpv3_theme_suggestions_page_alter(array &$suggestions, array $variables) {
    if ($node = \Drupal::routeMatch ()->getParameter ( 'node' )) {
        $title = cleanString($node->getTitle());
        $content_type = $node->bundle ();
        $suggestions [] = 'page__node__' . $node->getType();
        $suggestions [] = 'page__node__' . $node->getType() .'__'. $title;
        $suggestions [] = 'page__node__' . $title;
    }
}

function cpv3_theme_suggestions_container_alter ( &$suggestions, $vars, $hook) {
    $suggestions [] = 'container' . '__' . 'custom';
}

function cpv3_theme_suggestions_node_alter(array &$suggestions, array $variables) {
    if ($node = \Drupal::routeMatch ()->getParameter ( 'node' )) {
        $content_type = $node->bundle ();
        $suggestions [] = 'nodes/node__' . $content_type;
    }
}

function cpv3_preprocess_node( &$variables ) {
    global $base_url;
    $variables['theme_base_path'] = $base_url .'/'. \Drupal::theme ()->getActiveTheme ()->getPath ();
    $node = $variables['node'];
    $data = [];
    if($node->bundle() == 'eir_detail') {
        $eir_id = $node->get('field_select_eir')->getString();
        // Load parent nid and get respective field value.
        $eir_node = Node::load($eir_id);
        // Get field values.
        $data['case_number'] = $eir_node->get('field_case_number')->getString();
        $data['house_number'] = $eir_node->get('field_state_clearinghouse_number')->getString();
        $data['community_plan_areas'] = $eir_node->get('field_community_plan_areas')->getString();
        $data['council_district'] = $eir_node->get('field_council_district')->getString();
        $data['project_location'] = $eir_node->get('field_project_location')->getString();

        $variables['node_data'] = $data;
    }
}

/**
 * remove special characters & white spaces
 * each word is seperated with dash (-)
 * @param $string
 * @return string
 *
 */
function cleanString($string) {
    $string = str_replace(' ', '-', $string);                   // Replaces all spaces with hyphens.
    $string = preg_replace('/[^A-Za-z0-9\-]/', '', $string);    // Removes special chars.
    $string = str_replace('-', '_', $string);                   // Replaces all dash (-) with underscore(_).
    $string = strtolower($string);                              // Convert to lowercase

    return $string;
}

/**
 * create readable strings sperated with dash(-)
 * each word is seperated with dash (-)
 * @param $string
 * @return string
 *
 */
function readableURLString($string) {
    $string = str_replace(' ', '-', $string);                   // Replaces all spaces with hyphens.
    $string = preg_replace('/[&]/', '', $string);               // Removes special chars.
    $string = trim(preg_replace('/-+/', '-', $string), '-');    //combine two or more dash with single dash
    $string = strtolower($string);                              // Convert to lowercase
    
    return $string;
}

/**
 * Format Title for tab
 * @var $terms object
 * @return array
 */
function formatTabTitle ($terms) {
    $i = 1;
    $term_data = array();
    foreach ($terms as $term) :
    $name = explode(' ',$term->name, 3);
    if (count($name) >= 3) {
        $firstPart = $name[0] . ' ' . $name[1];
        $lastPart = $name[2];
    } else {
        $firstPart = $term->name;
    }

    $term_data [] = [
            'id' => $term->tid,
            'first_name' => $firstPart,
            'last_name' => $lastPart,
            'counter' => $i
    ];

    $i++;
    endforeach;

    return $term_data;
}