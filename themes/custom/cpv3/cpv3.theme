<?php
use Drupal\node\Entity\Node;
use Drupal\image\Entity\ImageStyle;
use Drupal\taxonomy\Entity\Term;

function cpv3_theme_rebuild () {
    drupal_static_reset('theme_get_registry');
    cache_clear_all('theme_registry', 'cache', TRUE);
}

/**
 * Implement hool_preprocess_html().
 * @param $variables
 */
function cpv3_preprocess_html ( &$variables ) {
    global $base_url;
    $variables['base_url'] = $base_url;
}

/**
 * Implement hook_preprocess().
 * @param array $variables
 */
function cpv3_preprocess_page ( &$variables ) {
    global $base_url;
    
	$variables['footer_message'] = theme_get_setting ( 'footer_message', 'ladcp' );
	$variables['images_path'] = \Drupal::theme ()->getActiveTheme ()->getPath () . '/image/';
	$variables['base_path'] = base_path ();
	$variables['theme_base_path'] = $base_url .'/'. \Drupal::theme ()->getActiveTheme ()->getPath ();
  	$variables['route_name'] = \Drupal::routeMatch()->getRouteName();
}

/**
 * Implement template_preprocess_views_view().
 * @param array $variables
 */
function cpv3_preprocess_views_view( &$variables ) {
    $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('commissions');
    $i = 1;
    foreach ($terms as $term) {
        $name = explode(' ',$term->name, 3);
        if(count($name) >= 3) {
            $first_name = $name[0].' '.$name[1];
            $last_name = $name[2];
        } else {
            $first_name = $term->name;
        }
        $term_data[] = array(
            "id" => $term->tid,
            "first_name" => $first_name,
            "last_name" => $last_name,
            "counter" => $i
        );
        $i++;
    }

    @$variables['category'] = $term_data;

    $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('area_planning_type');
    foreach ($terms as $term) {
        $term_data_1[] = array(
            "id" => $term->tid,
            "name" => $term->name,
        );
    }

    @$variables['planning_area_category'] = $term_data_1;
    
    
    /* publication */
    $termsNewsletter = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('newsletter_type');
    $i = 1;
    foreach ($termsNewsletter as $term) {
        $name = explode(' ', $term->name, 3);
        if (count($name) >= 3){
            $firstPart = $name[0];
            $lastPart = $name[1]. ' '.$name[2];
        } else {
            $firstPart = $term->name;
        }
        $term_data_newsletter[] = [
            'id' => $term->tid,
            'first_part' => $firstPart,
            'last_part' => $lastPart,
            'counter' => $i
        ];
        
        $i++;
    }
    @$variables['newsletter_category'] = $term_data_newsletter;
    
}

// template suggestion for container part
/* function cpv3_theme_suggestions_page_alter ( array &$suggestions, array $variables ) {
    // Add content type suggestions.
    if (($node = \Drupal::request()->attributes->get('node')) && (strpos($_SERVER['REQUEST_URI'], "revisions") == false)) {
        array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
    }
}

function cpv3_theme_suggestions_container_alter ( $suggestions, $vars, $hook ) {
    $suggestions[] = 'container' . '__' . 'custom';
} */
/**
 * @param array $suggestions
 * @param array $variables
 * Suggest template as per page--node--[content-type]--[node-title]
 * eg : page--node--page--publications.html.twig
 */
function cpv3_theme_suggestions_page_alter(array &$suggestions, array $variables) {
    if ($node = \Drupal::routeMatch ()->getParameter ( 'node' )) {
        $title = cleanString($node->getTitle());
        $content_type = $node->bundle ();
        $suggestions [] = 'page__node__' . $node->getType() .'__'. $title;
    }
}

function cpv3_theme_suggestions_container_alter ( &$suggestions, $vars, $hook) {
    $suggestions [] = 'container' . '__' . 'custom';
}

function cpv3_theme_suggestions_node_alter(array &$suggestions, array $variables) {
    if ($node = \Drupal::routeMatch ()->getParameter ( 'node' )) {
        $content_type = $node->bundle ();
        $suggestions [] = 'nodes/node__' . $content_type;
    }
}

function cpv3_preprocess_node( &$variables ) {
    $node = $variables['node'];
    $data = [];
    if($node->bundle() == 'eir_detail') {
        $eir_id = $node->get('field_select_eir')->getString();
        // Load parent nid and get respective field value.
        $eir_node = Node::load($eir_id);
        // Get field values.
        $data['case_number'] = $eir_node->get('field_case_number')->getString();
        $data['house_number'] = $eir_node->get('field_state_clearinghouse_number')->getString();
        $data['community_plan_areas'] = $eir_node->get('field_community_plan_areas')->getString();
        $data['council_district'] = $eir_node->get('field_council_district')->getString();
        $data['project_location'] = $eir_node->get('field_project_location')->getString();

        $variables['node_data'] = $data;
    }
}

/**
 * remove special characters & white spaces
 * each word is seperated with dash (-)
 * @param $string
 * @return string
 *
 */
function cleanString($string) {
    $string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.
    $string = preg_replace('/[^A-Za-z0-9\-]/', '', $string); // Removes special chars.
    $string = strtolower($string); // Convert to lowercase
    
    return $string;
}